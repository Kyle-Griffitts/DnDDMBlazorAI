@page "/"
@rendermode InteractiveServer
@using Azure.AI.OpenAI
@using Azure.Identity
@using OpenAI.Chat
@inject Microsoft.Extensions.Configuration.IConfiguration _config
@inject DungeonMasterChatService DungeonMasterChat
@inject ScrollService ScrollMagic


<div class="page-scroll">

    <h2 class="glow-text text-center">📜 Dungeon Master</h2>

    <div class="input-group mb-3" style="max-width: 1150px; width: 100%;">
        <input class="form-control" @bind="userMessage" @onkeydown="HandleEnter" readonly="@isSending" placeholder=" Speak your spell..." />
        <button class="btn glow-button" @onclick="SendMessage">
            Cast
        </button>
    </div>

    <div class="chat-wrapper d-flex">
        <!-- Chat messages -->
        <div class="chat-container card p-3"
             @ref="chatContainerRef">
            <ChatMessage Log="@chatLog" />
        </div>

        <div class="dice-panel d-flex flex-column align-items-center" style="width: 150px;">
            <div class="dice-tray">
                @foreach (var sides in new[] { 20, 12, 10, 8, 6, 4 })
                {
                    <Dice Sides="@sides"
                          Value="@diceValues[sides]"
                          IsRolling="@isRolling[sides]"
                          GlowClass="@diceGlowClass[sides]"
                          IsRevealed="@isTextRevealed[sides]"
                          OnRoll="() => RollDice(sides)" />
                }
            </div>

        </div>
        <!-- Candle Animations -->
        <div class="candle-container candle-left">
            <div class="flame"></div>
            <div class="wick"></div>
            <div class="wax-body"></div>
            <div class="drip drip1"></div>
            <div class="drip drip2"></div>
        </div>

        <div class="candle-container candle-right">
            <div class="flame"></div>
            <div class="wick"></div>
            <div class="wax-body"></div>
            <div class="drip drip1"></div>
            <div class="drip drip2"></div>
        </div>
    </div>

</div>

@code {
    private string? userMessage;
    private bool isSending = false;

    private ElementReference chatContainerRef;
    private bool shouldScroll = false;


    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userMessage) || isSending) return;

        isSending = true;
        await DungeonMasterChat.SendMessageAsync(userMessage);
        userMessage = string.Empty;
        isSending = false;

        shouldScroll = true;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldScroll)
        {
            shouldScroll = false;
            await ScrollMagic.ScrollToBottomAsync(chatContainerRef);
        }
    }

    // create a new Task that handles pressing Enter as a valid input to send a message
    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isSending)
        {
            await SendMessage();
        }
    }

    //to handle the roll dice
    private Dictionary<int, int> diceValues = new();
    private Dictionary<int, bool> isRolling = new();
    private Dictionary<int, string> diceGlowClass = new();
    private Dictionary<int, bool> isTextRevealed = new();

    protected override void OnInitialized()
    {
        chatLog = DungeonMasterChat.GetChatLog().ToList();
        DungeonMasterChat.OnChatUpdated += HandleChatUpdated;

        foreach (var sides in new[] { 4, 6, 8, 10, 12, 20 })
        {
            diceValues[sides] = sides;      // Default face value or 0 if preferred
            isRolling[sides] = false;
            diceGlowClass[sides] = "normal"; // default glow class
            isTextRevealed[sides] = false;
        }
    }

    private async Task RollDice(int sides)
    {
        isRolling[sides] = true;
        isTextRevealed[sides] = true;
        diceValues[sides] = new Random().Next(1, sides + 1);

        // Set visual glow class
        diceGlowClass[sides] = diceValues[sides] == sides
            ? "critical"
            : diceValues[sides] == 1
                ? "fail"
                : "normal";

        StateHasChanged(); // update immediately

        // Fire-and-forget reset after 3 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(3000);
            diceValues[sides] = sides;
            isTextRevealed[sides] = false;
            InvokeAsync(StateHasChanged); // resets the animations for the dice value
        });
        
        // Meanwhile, continue with message and scrolling
        var message = $"I rolled a D{sides}: result *{diceValues[sides]}*";
        await DungeonMasterChat.SendMessageAsync(message);
        HandleChatUpdated(); // ensures freshness

        userMessage = string.Empty;
        shouldScroll = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private List<ChatLogMessage> chatLog = new();
    
    private void HandleChatUpdated()
    {
        chatLog = DungeonMasterChat.GetChatLog().ToList(); // ensure it's fresh
        InvokeAsync(StateHasChanged);
    }

}

<script>
    window.scrollToBottom = function (element) {
        if (element) {
            element.scrollTo({
                top: element.scrollHeight,
                behavior: 'smooth'
            });
        }
    };
</script>
