@page "/"  
@rendermode InteractiveServer  
@using Azure.AI.OpenAI  
@using Azure.Identity  
@using OpenAI.Chat  
@inject Microsoft.Extensions.Configuration.IConfiguration _config
@inject DungeonMasterChatService DungeonMasterChat  
@inject ScrollService ScrollMagic


<div class="page-scroll">
   
    <h2 class="glow-text text-center">📜 Dungeon Master's Oracle</h2>

    <div class="input-group mb-3" style="max-width: 1000px; width: 100%;">
        <input class="form-control" @bind="userMessage" disabled="@isSending" @onkeydown="HandleEnter" placeholder=" Speak your spell..." />
        <button class="btn glow-button" @onclick="SendMessage" disabled="@isSending">Cast
        </button>
    </div>

    @{
        var chatLog = DungeonMasterChat.GetChatLog();
        var lastMessage = chatLog.LastOrDefault();
    }
    
    <div class="chat-wrapper d-flex" style="width: 1000px; margin: auto;">
        <!-- Chat messages -->
    <div class="chat-container card p-3"
         style="overflow-y: auto; height: 800px; width: 1000px; margin: auto;"
         @ref="chatContainerRef">
        @foreach (var message in chatLog)
        {
            <div class="chat-bubble @(message.Role == "user" ? "user-msg" : "bot-msg") mb-2">
                <div class="chat-meta text-muted">
                    <strong>@message.Role:</strong>
                </div>
                <div class="chat-content">
                    @((MarkupString)message.Content.Replace("\n", "<br />"))
                </div>
            </div>
        }
    </div>


        <div class="dice-panel d-flex flex-column align-items-center" style="width: 150px;">
            <div class="dice-tray">
                <button class="dice-button" @onclick="() => RollDice(20)">
                    @D20Svg
                </button>
                <button class="dice-button" @onclick="() => RollDice(12)">
                    @D12Svg
                </button>
                <button class="dice-button" @onclick="() => RollDice(10)">
                    @D10Svg
                </button>
                <button class="dice-button" @onclick="() => RollDice(8)">
                    @D8Svg
                </button>
                <button class="dice-button" @onclick="() => RollDice(6)">
                    @D6Svg
                </button>
                <button class="dice-button" @onclick="() => RollDice(4)">
                    @D4Svg
                </button>
        </div>

    </div>

    </div>
</div>

@code {
    private string? userMessage;  
    private bool isSending = false;

    private ElementReference chatContainerRef;
    private bool shouldScroll = false;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userMessage) || isSending) return;

        isSending = true;
        await DungeonMasterChat.SendMessageAsync(userMessage);
        userMessage = string.Empty;
        isSending = false;

        shouldScroll = true;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldScroll)
        {
            shouldScroll = false;
            await ScrollMagic.ScrollToBottomAsync(chatContainerRef);
        }
    }

    // create a new Task that handles pressing Enter as a valid input to send a message
    private async Task HandleEnter(KeyboardEventArgs e)  
    {  
        if (e.Key == "Enter")  
        {  
            await SendMessage();  
        }  
    }  

    //to handle the roll dice
    private Dictionary<int, int> diceValues = new();
    private Dictionary<int, bool> isRolling = new();
    private Dictionary<int, string> diceGlowClass = new();
    private Dictionary<int, bool> isTextRevealed = new();

    protected override void OnInitialized()
    {
        foreach (var sides in new[] { 4, 6, 8, 10, 12, 20 })
        {
            diceValues[sides] = sides;      // Default face value or 0 if preferred
            isRolling[sides] = false;
            diceGlowClass[sides] = "normal"; // default glow class
            isTextRevealed[sides] = false;
        }
    }


    private async Task RollDice(int sides)
    {
        isRolling[sides] = true;
        isTextRevealed[sides] = true;
        diceValues[sides] = new Random().Next(1, sides + 1);

        // Set visual glow class
        diceGlowClass[sides] = diceValues[sides] == sides
            ? "critical"
            : diceValues[sides] == 1
                ? "fail"
                : "normal";

        StateHasChanged(); // update immediately

        // Fire-and-forget reset after 3 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(3000);
            diceValues[sides] = sides;
            isTextRevealed[sides] = false;
            InvokeAsync(StateHasChanged); // resets the animations for the dice value
        });

        // Meanwhile, continue with message and scrolling
        var message = $"🧙‍♂️ You rolled a D{sides}: **{diceValues[sides]}**";
        await DungeonMasterChat.SendMessageAsync(message);

        userMessage = string.Empty;
        shouldScroll = true;
        await InvokeAsync(StateHasChanged);
    }

    // Handles each dice
    private RenderFragment D4Svg => @<svg viewBox="0 0 100 100" class="dice-icon @(isRolling[4] ? "roll-animation" : "") @diceGlowClass[4]">
        <polygon points="50,5 95,95 5,95" fill="#2c2c2c" stroke="#ccc" stroke-width="2" />
            <text x="50%" y="60%" dominant-baseline="middle" text-anchor="middle"
              class="dice-text">@diceValues[4]</text>

    </svg>;

    private RenderFragment D6Svg => @<svg viewBox="0 0 100 100" class="dice-icon @(isRolling[6] ? "roll-animation" : "") @diceGlowClass[6]">
        <polygon points="20,20 80,20 80,80 20,80" fill="#2c2c2c" stroke="#ccc" stroke-width="2" />
            <text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle"
              class="dice-text@(isTextRevealed[6] ? "revealed" : "")">@diceValues[6]</text>

    </svg>;

    private RenderFragment D8Svg => @<svg viewBox="0 0 100 100" class="dice-icon @(isRolling[8] ? "roll-animation" : "") @diceGlowClass[8]">
        <polygon points="50,5 95,50 50,95 5,50" fill="#2c2c2c" stroke="#ccc" stroke-width="2" />
            <text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle"
              class="dice-text@(isTextRevealed[8] ? "revealed" : "")">@diceValues[8]</text>

    </svg>;

    private RenderFragment D10Svg => @<svg viewBox="0 0 100 100" class="dice-icon @(isRolling[10] ? "roll-animation" : "") @diceGlowClass[10]">
        <polygon points="50,5 90,50 50,95 10,50" fill="#2c2c2c" stroke="#ccc" stroke-width="2" />
            <text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle"
              class="dice-text@(isTextRevealed[10] ? "revealed" : "")">@diceValues[10]</text>

    </svg>;

    private RenderFragment D12Svg => @<svg viewBox="0 0 100 100" class="dice-icon @(isRolling[12] ? "roll-animation" : "") @diceGlowClass[12]">
        <polygon points="50,10 80,30 90,50 80,70 50,90 20,70 10,50 20,30" fill="#2c2c2c" stroke="#ccc" stroke-width="2" />
            <text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle"
              class="dice-text@(isTextRevealed[12] ? "revealed" : "")">@diceValues[12]</text>

    </svg>;

    private RenderFragment D20Svg => @<svg viewBox="0 0 100 100" class="dice-icon @(isRolling[20] ? "roll-animation" : "") @diceGlowClass[20]">
        <polygon points="50,10 80,25 90,55 70,80 50,90 30,80 10,55 20,25" fill="#2c2c2c" stroke="#ccc" stroke-width="2" />
            <text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle"
              class="dice-text@(isTextRevealed[20] ? "revealed" : "")">@diceValues[20]</text>

    </svg>;
}

<script>
    window.scrollToBottom = function (element) {
        if (element) {
            element.scrollTo({
                top: element.scrollHeight,
                behavior: 'smooth'
            });
        }
    };
</script>
